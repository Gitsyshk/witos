#!/usr/bin/python

import shutil
import pygtk
pygtk.require('2.0')
import gtk
import os,re
import socket, fcntl, struct

class MainWin:
	config = {}
	irq_support = False
	local_ip = ""
	flash_mode = "NAND_ECC_HW"
	nfs_root = ""
	mac_addr = ""

	def delete_event(self, widget, event, data=None):
		print "delete event occurred"
		return False

	def destroy(self, widget, data=None):
		gtk.main_quit()

	def change_plat(self, widget):
		self.radio_ecc_sw.set_active(True)
		self.radio_polling.set_active(True)
		if widget.get_active() == 0:
			self.config["ARCH"] = "arm"
			self.config["ARCH_VER"] = "armv4t"
			self.config["PLAT_DIR"] = "s3c24x0"
			self.config["PLAT_NAME"] = "s3c2410"
			self.config["CONSOLE"] = "ttySAC0"
			self.radio_ecc_hw.set_active(True)
			self.radio_interrupt.set_active(True)
		elif widget.get_active() == 1:
			self.config["ARCH"] = "arm"
			self.config["ARCH_VER"] = "armv4t"
			self.config["PLAT_DIR"] = "s3c24x0"
			self.config["PLAT_NAME"] = "s3c2440"
			self.config["CONSOLE"]  = "ttySAC0"
			self.radio_ecc_hw.set_active(True)
			self.radio_interrupt.set_active(True)
		elif widget.get_active() == 2:
			self.config["ARCH"] = "arm"
			self.config["ARCH_VER"] = "armv6"
			self.config["PLAT_DIR"] = "s3c6410"
			self.config["PLAT_NAME"] = "s3c6410"
			self.config["CONSOLE"]  = "ttySAC0"
		elif widget.get_active() == 3:
			self.config["ARCH"] = "arm"
			self.config["ARCH_VER"] = "armv5te"
			self.config["PLAT_DIR"] = "at91sam926x"
			self.config["PLAT_NAME"] = "at91sam9261"
			self.config["CONSOLE"]  = "ttyS0"
			self.radio_interrupt.set_active(True)
		elif widget.get_active() == 4:
			self.config["ARCH"] = "arm"
			self.config["ARCH_VER"] = "armv5te"
			self.config["PLAT_DIR"] = "at91sam926x"
			self.config["PLAT_NAME"] = "at91sam9263"
			self.config["CONSOLE"]  = "ttyS0"
			self.radio_interrupt.set_active(True)
			self.radio_ecc_hw.set_active(True)
		else:
			self.config["ARCH"] = "Unknown"

	def get_ip_address(self, ifname):
		print "eth0"[:15]
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			ifx_ip = fcntl.ioctl(sock.fileno(), 0x8915, # SIOCGIFADDR
							struct.pack('256s', ifname[:15]))
			print socket.inet_ntoa(ifx_ip[20:24])
		except IOError:
			return "0.0.0.0"
		return socket.inet_ntoa(ifx_ip[20:24])

	def ecc_option(self, widget, data=None):
		if widget.get_active() == True:
			self.flash_mode = data

	def irq_option(self, widget, data=None):
		self.irq_support = data

	def mac_display2build(self, display):
		mac = display.split(':')
		return "{0x%s,0x%s,0x%s,0x%s,0x%s,0x%s}" % \
			(mac[0],mac[1],mac[2],mac[3],mac[4],mac[5])

	def default_server_ip(self):
		ifname = "eth0"
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			ifx_ip = fcntl.ioctl(sock.fileno(), 0x8915, # SIOCGIFADDR
							struct.pack('256s', ifname[:15]))
			server_ip = socket.inet_ntoa(ifx_ip[20:24])

			self.local_ip = "1" + os.popen("date +%S").read().replace('\n', '')
			self.local_ip = server_ip.rsplit(".", 1)[0] + "." + self.local_ip
		except IOError:
			server_ip = "0.0.0.0"
			self.local_ip = "0.0.0.0"

		return server_ip

	def ip_display2build(self, display):
		ip = display.split('.')
		return "%s,%s,%s,%s" % (ip[0],ip[1],ip[2],ip[3])

	def default_nfs_root(self):
		self.nfs_root = os.getenv("HOME") + "/maxwit/rootfs"
		return self.nfs_root

	def save_config(self,button):
		plat_name = self.config["PLAT_NAME"].upper()
		image_path = self.ent_image_path.get_text()
		server_ip = self.ip_display2build(self.ent_server.get_text())
		self.local_ip = self.ip_display2build(self.ent_local.get_text())
		self.nfs_root = self.ent_nfs.get_text()
		mac = self.ent_mac.get_text()
		self.mac_addr = self.mac_display2build(mac)

		conf_file = 'build/configs/' + self.config["ARCH"] + '/' + self.config["PLAT_DIR"] + '/' + plat_name.lower() + '_config.xml'
		make_file = 'Makefile'
		shutil.copyfile(conf_file, make_file)

		Makefile = open(make_file, 'a')
		Makefile.write('\n')
		Makefile.write("export CONFIG_" + plat_name + " = y\n")
		if self.irq_support == True:
			Makefile.write("export CONFIG_IRQ_SUPPORT = y\n")
		else:
			Makefile.write("# export CONFIG_IRQ_SUPPORT = y\n")
		Makefile.write("export CONFIG_NAND_SUPPORT = y\n")
		Makefile.write("export CONFIG_YMODEM_SUPPORT = y\n")
		if self.cmb_plat.get_active() != 0 and self.cmb_plat.get_active() != 1:
			Makefile.write("export CONFIG_KERMIT_SUPPORT = y\n")
		else:
			Makefile.write("# export CONFIG_KERMIT_SUPPORT = y\n")
		Makefile.write("\n")
		Makefile.write("ARCH = " + self.config["ARCH"] + '\n')
		Makefile.write("ARCH_VER = " + self.config["ARCH_VER"] + '\n')
		Makefile.write("PLAT_DIR = " + self.config["PLAT_DIR"] + '\n')
		Makefile.write("PLAT_OPT = -DCONFIG_" + plat_name + '\n')
		Makefile.write("CROSS_COMPILE = " + self.ent_toolchain.get_text() + '\n\n')
		Makefile.write("IMAGE_OUT_DIR = %s"  %image_path + '\n\n')
		# fixme
		os.system("mkdir -p " + image_path)

		makefile_in = open('Makefile.in', 'r')
		for eachline in makefile_in:
			Makefile.write(eachline)
		makefile_in.close()
		Makefile.close()

		autoconf = open('include/autoconf.h', 'w')
		autoconf.write('#pragma once\n\n')
		autoconf.write('// general\n')
		if self.irq_support == True:
			autoconf.write('#define CONFIG_IRQ_SUPPORT\n')
		else:
			autoconf.write('// #define CONFIG_IRQ_SUPPORT\n')
		autoconf.write('#define CONFIG_LOADER_MENU\n')
		autoconf.write('#define CONFIG_PLAT_NAME \"' + plat_name + '\"\n')
		autoconf.write('// #define CONFIG_DEBUG\n')
		autoconf.write('// uart\n')
		autoconf.write('#define CONFIG_UART_INDEX  0\n')
		autoconf.write('// flash\n')
		autoconf.write('#define CONFIG_NAND_ECC_MODE %s\n' % self.flash_mode)
		autoconf.write('#define CONFIG_GTH_WRITE\n')
		autoconf.write('// network\n')
		autoconf.write('#define CONFIG_NET_MASK   MKIP(255,255,255,0)\n')
		autoconf.write('#define CONFIG_LOCAL_IP   MKIP(%s)\n'%	self.local_ip)
		autoconf.write("#define CONFIG_SERVER_IP  MKIP(%s)\n"% server_ip)
		autoconf.write('#define CONFIG_MAC_ADDR   %s\n' % self.mac_addr)
		autoconf.write('// graphics\n')
		autoconf.write('#define CONFIG_LCD_ID  0\n')
		autoconf.write('// boot\n')
		autoconf.write("#define CONFIG_NFS_ROOT \"%s\"\n" %self.nfs_root)
		autoconf.write('#define CONFIG_CONSOLE_NAME \"' + self.config["CONSOLE"] + '\"\n')
		autoconf.write('\n')
		autoconf.write('#include <' + self.config['ARCH'] + '/cpu.h>\n')
		autoconf.write('#include <' + self.config['ARCH'] + '/' + self.config['PLAT_DIR'] + '.h>\n')
		autoconf.close()

		gtk.main_quit()

	def __init__(self):
		self.config["CONSOLE"] = "ttyS0"

		self.window = gtk.Window()
		self.window.set_border_width(10)
		self.window.set_title("MaxWit g-bios (v1.1)")
		self.window.move(300, 100)
		self.window.resize(330, 200)
		self.window.connect("destroy", self.destroy)

		vbox = gtk.VBox(False, 2)
		self.window.add(vbox)

		lab_plat = gtk.Label("Platform:")
		self.cmb_plat = gtk.combo_box_new_text()
		self.cmb_plat.connect("changed", self.change_plat)
		self.cmb_plat.append_text("Samsung S3C2410")
		self.cmb_plat.append_text("Samsung S3C2440")
		self.cmb_plat.append_text("Samsung S3C6410")
		self.cmb_plat.append_text("ATMEL AT91SAM9261")
		self.cmb_plat.append_text("ATMEL AT91SAM9263")

		lab_toolchain = gtk.Label("Toolchain:")
		self.ent_toolchain = gtk.Entry()
		self.ent_toolchain.set_size_request(210,30)

		lab_image_path= gtk.Label("Image Path:")
		self.ent_image_path = gtk.Entry()
		self.ent_image_path.set_size_request(210,30)

		# network interface

		# sever ip
		labServer = gtk.Label("Server IP:")
		self.ent_server = gtk.Entry()
		self.ent_server.set_size_request(140,30)
		self.ent_server.set_text(self.default_server_ip())
		# local ip
		labLocal = gtk.Label("Local IP:")
		self.ent_local = gtk.Entry()
		self.ent_local.set_size_request(140,30)
		self.ent_local.set_text(self.local_ip)

		# MAC address
		lab_mac = gtk.Label("MAC Addr:")
		self.ent_mac = gtk.Entry()
		self.ent_mac.set_size_request(140,30)

		YEAR = os.popen("date +%y").read().replace("\n", "")
		MONTH = os.popen("date +%m").read().replace("\n", "")
		DAY = os.popen("date +%d").read().replace("\n", "")
		HOUR = os.popen("date +%H").read().replace("\n", "")
		MIN = os.popen("date +%M").read().replace("\n", "")
		self.mac_addr = "10:%s:%s:%s:%s:%s" % (YEAR, MONTH, DAY, HOUR, MIN)
		self.ent_mac.set_text(self.mac_addr)
		# default NFS path
		lab_nfs = gtk.Label("NFS Path:")
		self.ent_nfs = gtk.Entry()
		self.ent_nfs.set_size_request(140,30)
		self.ent_nfs.set_text(self.default_nfs_root())

		# flash interface
		self.radio_ecc_hw = gtk.RadioButton(None, "Hardware")
		self.radio_ecc_hw.connect("toggled", self.ecc_option, "NAND_ECC_HW")

		self.radio_ecc_sw = gtk.RadioButton(self.radio_ecc_hw, "Software")
		self.radio_ecc_sw.connect("toggled", self.ecc_option, "NAND_ECC_SW")

		self.radio_ecc_raw = gtk.RadioButton(self.radio_ecc_hw, "None")
		self.radio_ecc_raw.connect("toggled", self.ecc_option, "NAND_ECC_NONE")

		# IRQ
		self.radio_interrupt = gtk.RadioButton(None, "IRQ Enabled")
		self.radio_interrupt.connect("toggled", self.irq_option, True)

		self.radio_polling = gtk.RadioButton(self.radio_interrupt, "Polling Mode")
		self.radio_polling.connect("toggled", self.irq_option, False)

		btnBuild = gtk.Button("Build")
		btnBuild.set_size_request(100,30)
		btnBuild.connect("clicked",self.save_config)

		table1 = gtk.Table(3, 2, False)
		table1.attach(lab_plat, 0, 1, 0, 1, 0, 0, 5, 5)
		table1.attach(self.cmb_plat, 1, 2, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table1.attach(lab_toolchain, 0, 1, 1, 2, 0, 0, 5, 5)
		table1.attach(self.ent_toolchain, 1, 2, 1, 2, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table1.attach(lab_image_path, 0, 1, 2, 3, 0, 0, 5, 5)
		table1.attach(self.ent_image_path, 1, 2, 2, 3, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)

		table2 = gtk.Table(4, 2, False)
		table2.attach(labServer, 0, 1, 0, 1, 0, 0, 5, 5)
		table2.attach(self.ent_server, 1, 2, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table2.attach(labLocal, 0, 1, 1, 2, 0, 0, 5, 5)
		table2.attach(self.ent_local, 1, 2, 1, 2, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table2.attach(lab_mac, 0, 1, 2, 3, 0, 0, 5, 5)
		table2.attach(self.ent_mac, 1, 2, 2, 3, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table2.attach(lab_nfs, 0, 1, 3, 4, 0, 0, 5, 5)
		table2.attach(self.ent_nfs, 1, 2, 3, 4, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)

		table3 = gtk.Table(1, 3, True)
		table3.attach(self.radio_ecc_hw, 0, 1, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table3.attach(self.radio_ecc_sw, 1, 2, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table3.attach(self.radio_ecc_raw, 2, 3, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)

		table4 = gtk.Table(1, 2, True)
		table4.attach(self.radio_interrupt, 0, 1, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)
		table4.attach(self.radio_polling, 1, 2, 0, 1, gtk.EXPAND|gtk.FILL, gtk.EXPAND|gtk.FILL, 5, 5)

		box4 = gtk.HBox(False, 0)
		box4.pack_start(btnBuild, True, False, 0)

		frame = gtk.Frame("General")
		frame.add(table1)
		vbox.pack_start(frame, False, False, 0)

		frame = gtk.Frame("Network")
		frame.add(table2)
		vbox.pack_start(frame, False, False, 0)

		frame = gtk.Frame("Flash ECC Mode")
		frame.add(table3)
		vbox.pack_start(frame, False, False, 0)

		frame = gtk.Frame("IRQ/Polling Mode")
		frame.add(table4)
		vbox.pack_start(frame, False, False, 0)

		vbox.pack_start(box4, False, False, 0)

		self.cmb_plat.set_active(2)
		self.ent_toolchain.set_text(self.config["ARCH"] + "-maxwit-linux-gnueabi-")
		self.ent_image_path.set_text("/var/lib/tftpboot")

		self.window.show_all()

	def main(self):
		gtk.main()

if __name__ == "__main__":
	MainWin().main()

